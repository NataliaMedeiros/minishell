// char	**split_cmds(t_data data)
// {
// 	int		nb_args;
// 	int		counter;
// 	int		i;
// 	int		start;
// 	char	**cmd;

// 	nb_args = nb_commands(data.cmd_line); // este cria os numeros de commandos corretamente
// 	cmd = ft_calloc((nb_args + 1), sizeof(char *));
// 	if (cmd == NULL)
// 		return (NULL);
// 	counter = 0;
// 	i = 0;
// 	while (counter < nb_args)
// 	{
// 		start = i;
// 		while (data.cmd_line[i] != '\0' && data.cmd_line[i] != '|'
// 			&& data.cmd_line[i] != '>' && data.cmd_line[i] != '<')
// 			i++;
// 		cmd[counter] = ft_substr_modified(data.cmd_line, start, (i - start));
// 		if (cmd[counter] == NULL)
// 			return (free_array(counter, cmd), NULL);
// 		printf("cmd[%d]: %s\n", counter, cmd[counter]);
// 		counter++;
// 		start = i;
// 		if (counter == nb_args)
// 			break ;
// 		if (data.cmd_line[i] == '>' || data.cmd_line[i] == '<')
// 			i++;
// 		cmd[counter] = ft_substr(data.cmd_line, start, (i + 1 - start));
// 		if (cmd[counter] == NULL)
// 			return (free_array(counter, cmd), NULL);
// 		printf("cmd[%d]: %s\n", counter, cmd[counter]);
// 		counter++;
// 		i++;
// 	}
// 	cmd[counter] = NULL;
// 	return (cmd);
// }


// char	**split_cmds(t_data data)
// {
// 	char	**cmd;
// 	int		nb_args;
	// int		counter;
	// int		i;
	// int		start;
	// bool	has_double_quotes;

	// nb_args = nb_commands(data.cmd_line);
	// counter = 0;
	// i = 0;
	// has_double_quotes = false;
	// cmd	= ft_calloc(nb_args, sizeof(char *));
	// if (cmd == NULL)
	// 	return (NULL);
	// fill_array(cmd, nb_args, data);
	// while (counter < nb_args - 1 || data.cmd_line[i] != '\0')
	// {
	// 	start = i;
	// 	if (is_operator_or_null(data.cmd_line[i]))
	// 		i++;
	// 	else
	// 	{
	// 		while (!is_operator_or_null(data.cmd_line[i + 1]) || has_double_quotes == true)
	// 		{
	// 			if (data.cmd_line[i] == '"')
	// 				has_double_quotes = !has_double_quotes;
	// 			i++;
	// 		}
	// 	}
	// 	cmd[counter] = ft_substr_modified(data.cmd_line, start, (i + 1 - start));
	// 	counter++;
	// 	i++;
	// }
	// cmd[counter] = NULL;
	// return (cmd);
// }

char	*ft_substr_modified(char const *s, unsigned int start, size_t len)
{
	char	*substring;
	size_t	i;
	bool	has_double_quotes;

	i = 0;
	if (!s)
		return (NULL);
	while (s[start] == ' ')
		start++;
	if (ft_strlen(s) <= len)
		len = ft_strlen(s) - start;
	if (ft_strlen(s) == 1 || start >= ft_strlen(s))
		len = 0;
	else if (ft_strlen(s) - start < len)
		len = ft_strlen(s) - start;
	substring = ft_calloc(len + 1, sizeof(char));
	if (substring == NULL)
		return (NULL);
	has_double_quotes = false;
	while (i < len && start < ft_strlen(s))
	{
		if (s[start] == '"')
				has_double_quotes = !has_double_quotes;
		if (s[start] == ' ' && s[start + 1] == '\0')
			return (substring);
		else if ((s[start] == ' ' && has_double_quotes == false)
				&& (s[start + 1] == '>'|| s[start + 1] == '<'
				|| s[start + 1] == '|'))
			return (substring);
		else if (s[start] == ' ' && is_operator_or_null(s[start - 1]) == 1
				&& ft_isalpha(s[start + 1]) == 1 && has_double_quotes == false)
			return (substring);
		substring[i] = s[start];
		i++;
		start++;
	}
	return (substring);
}

void ft_list_reverse (t_list **begin_list)
{
	t_list	*prev = NULL;
	t_list	*current = *begin_list;
	t_list	*next = NULL;

// 1 - 2 - 3 - 4 - 5
	while (current != NULL)
	{
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}
	*begin_list = prev;
	print_list(*begin_list);
}

// int	handle_infile(t_parser	**parser, char **cmd_table, int i)
// {
// 	char		*type;
// 	t_infile	*temp;

// 	if (cmd_table[i][1] == '<')
// 		type = "heredoc";
// 	else
// 		type = "infile";
// 	if ((*parser)->infile == NULL)
// 		(*parser)->infile = new_infile(cmd_table[i + 1], type);
// 	else
// 	{
// 		temp = (*parser)->infile;
// 		while (temp->next != NULL)
// 			temp = temp->next;
// 		temp->next = new_infile(cmd_table[i + 1], type);
// 	}
// 	return (0);
// }

static int	handle_redirection_in(t_data	*data, int i, char *type)
{
	// t_infile	*temp;
	char		**new_cmd;

	new_cmd = split_redirection_first(data->cmd_table[i + 1]);
	i = 0;
	data->parser->cmd = ft_split(new_cmd[1], ' ');
	if (data->parser->cmd == NULL)
		return (1);
	if (data->parser->infile == NULL)
		data->parser->infile = new_infile(new_cmd[0], type);
	else
	{
		add_infile_back(&data->parser->infile, new_cmd[0], type);
		// temp = data->parser->infile;
		// while (temp->next != NULL)
		// 	temp = temp->next;
		// temp->next = new_infile(new_cmd[0], type);
	}
	return (0);
}

int	handle_infile(t_data *data, int i, bool start_with_redirection)
{
	char		*type;
	// t_infile	*temp;

	if (data->cmd_table[i][1] == '<')
		type = "heredoc";
	else
		type = "infile";
	if (start_with_redirection == true)
	{
		if (handle_redirection_in(data, i, type) == 1)
			return (1);
	}
	else
	{
		if (data->parser->infile == NULL)
			data->parser->infile = new_infile(data->cmd_table[i+1], type);
		else
		{
			add_infile_back(&data->parser->infile, data->cmd_table[i + 1], type);
			// temp = data->parser->infile;
			// while (temp->next != NULL)
			// 	temp = temp->next;
			// temp->next = new_infile(data->cmd_table[i+1], type);
		}
	}
	return (0);
}
